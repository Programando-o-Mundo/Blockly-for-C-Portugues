// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.zh-hants');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Adicionar comentário";
Blockly.Msg.AUTH = "Por favor, autorize este aplicativo para permitir que seu trabalho seja salvo e compartilhado por você.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Alterar valor:";
Blockly.Msg.CHAT = "Converse com seu colaborador digitando nesta caixa!";
Blockly.Msg.COLLAPSE_ALL = "Recolher todos os blocos";
Blockly.Msg.COLLAPSE_BLOCK = "Recolher bloco";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "cor 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "cor 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "proporção";
Blockly.Msg.COLOUR_BLEND_TITLE = "misturar";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Mistura duas cores juntas com uma proporção dada (0,0 - 1,0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://pt.wikipedia.org/wiki/Cor";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Escolha uma cor na paleta.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "cor aleatória";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Escolha uma cor aleatória.";
Blockly.Msg.COLOUR_RGB_BLUE = "azul";
Blockly.Msg.COLOUR_RGB_GREEN = "verde";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "vermelho";
Blockly.Msg.COLOUR_RGB_TITLE = "cor com";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Crie uma cor com a quantidade especificada de vermelho, verde e azul. Todos os valores devem estar entre 0 e 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#Loop_Termination_Blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "Sair do laço imediatamente";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "Continuar com a próxima iteração do laço";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Sair imediatamente do laço em execução.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Ignorar o restante das declarações dentro do laço e continuar com a próxima iteração.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Aviso: Este bloco só pode ser usado dentro de um bloco de programa de laço.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#for_each for each block";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST = "na lista";
Blockly.Msg.CONTROLS_FOREACH_INPUT_INLIST_TAIL = "";
Blockly.Msg.CONTROLS_FOREACH_INPUT_ITEM = "para cada item";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Para cada item em uma lista, defina a variável '%1' para o item e, em seguida, execute algumas declarações.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#count_with";
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "de %1 até %2 por %3";
Blockly.Msg.CONTROLS_FOR_INPUT_WITH = "contar com";
Blockly.Msg.CONTROLS_FOR_INPUT_ORDER = "contagem crescente";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Usando a variável de contagem '%1', comece a partir de um valor inicial até um valor final, aumentando em intervalos definidos, e execute o bloco de declarações especificado.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Adicionar uma condição ao bloco condicional.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Adicione uma condição final 'caso contrário' para o bloco condicional.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://code.google.com/p/blockly/wiki/If_Then";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Adicione, remova ou reorganize seções para reconfigurar este bloco condicional.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "caso contrário";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "caso contrário se";
Blockly.Msg.CONTROLS_IF_MSG_IF = "se";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Se um valor for verdadeiro, execute um bloco de declarações.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Se um valor for verdadeiro, execute o primeiro bloco de declarações. Caso contrário, execute o segundo bloco de declarações.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Se o primeiro valor for verdadeiro, execute o primeiro bloco de declarações. Caso contrário, se o segundo valor for verdadeiro, execute o segundo bloco de declarações.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Se o primeiro valor for verdadeiro, execute o primeiro bloco de declarações. Caso contrário, se o segundo valor for verdadeiro, execute o segundo bloco de declarações. Se nenhum valor for verdadeiro, execute o último bloco de declarações.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "faça";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repetir %1 vezes";
Blockly.Msg.CONTROLS_REPEAT_TITLE_REPEAT = "repetir até";
Blockly.Msg.CONTROLS_REPEAT_TITLE_TIMES = "vezes";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Executa um conjunto de instruções várias vezes.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://code.google.com/p/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repetir até que";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repetir enquanto";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Executa um conjunto de instruções até que a condição seja falsa.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Executa um conjunto de instruções enquanto a condição for verdadeira.";
Blockly.Msg.DELETE_BLOCK = "Excluir bloco";
Blockly.Msg.DELETE_X_BLOCKS = "Excluir %1 blocos";
Blockly.Msg.DISABLE_BLOCK = "Desativar bloco";
Blockly.Msg.DUPLICATE_BLOCK = "Duplicar";
Blockly.Msg.ENABLE_BLOCK = "Ativar bloco";
Blockly.Msg.EXPAND_ALL = "Expandir blocos";
Blockly.Msg.EXPAND_BLOCK = "Expandir bloco";
Blockly.Msg.EXTERNAL_INPUTS = "Entradas externas";
Blockly.Msg.HELP = "Ajuda";
Blockly.Msg.INLINE_INPUTS = "Entradas em linha";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://en.wikipedia.org/wiki/Linked_list#Empty_lists";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "criar lista vazia";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Retorna uma lista, de comprimento 0, contendo nenhum registro de dados";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "lista";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Adicionar, remover ou reordenar seções para reconfigurar este bloco de lista.";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "criar lista com";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Adicionar um item à lista.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Cria uma lista com qualquer número de itens.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "primeiro";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# a partir do final";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "obter";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "obter e remover";
Blockly.Msg.LISTS_GET_INDEX_LAST = "último";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "aleatório";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remover";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Retorna o primeiro item em uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Retorna o item na posição especificada em uma lista. #1 é o último item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Retorna o item na posição especificada em uma lista. #1 é o primeiro item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Retorna o último item em uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Retorna um item aleatório em uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Remove e retorna o primeiro item em uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Remove e retorna o item na posição especificada em uma lista. #1 é o último item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Remove e retorna o item na posição especificada em uma lista. #1 é o primeiro item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Remove e retorna o último item em uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Remove e retorna um item aleatório em uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Remove o primeiro item em uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Remove o item na posição especificada em uma lista. #1 é o último item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Remove o item na posição especificada em uma lista. #1 é o primeiro item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Remove o último item em uma lista.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Remove um item aleatório em uma lista.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "até # a partir do final";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "até #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "até o último";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_a_sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "obter sublista do primeiro";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "obter sublista de # a partir do final";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "obter sublista de #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Cria uma cópia da porção especificada de uma lista.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "encontrar a primeira ocorrência do item";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#Getting_Items_from_a_List";
Blockly.Msg.LISTS_INDEX_OF_LAST = "encontrar a última ocorrência do item";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Retorna o índice da primeira/última ocorrência do item na lista. Retorna 0 se o texto não for encontrado.";
Blockly.Msg.LISTS_INLIST = "na lista";
Blockly.Msg.LISTS_IS_EMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#is_empty";
Blockly.Msg.LISTS_IS_EMPTY_TITLE = "%1 está vazia";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#length_of";
Blockly.Msg.LISTS_LENGTH_TITLE = "comprimento de %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Retorna o comprimento de uma lista.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#create_list_with";
Blockly.Msg.LISTS_REPEAT_TITLE = "criar lista com o item %1 repetido %2 vezes";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Cria uma lista que consiste no valor fornecido repetido o número especificado de vezes.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://code.google.com/p/blockly/wiki/Lists#in_list_..._set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "como";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "inserir em";
Blockly.Msg.LISTS_SET_INDEX_SET = "definir";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Insere o item no início de uma lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Insere o item na posição especificada em uma lista. #1 é o último item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Insere o item na posição especificada em uma lista. #1 é o primeiro item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Anexa o item ao final de uma lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Insere o item aleatoriamente em uma lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Define o primeiro item de uma lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Define o item na posição especificada em uma lista. #1 é o último item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Define o item na posição especificada em uma lista. #1 é o primeiro item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Define o último item de uma lista.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Define um item aleatório em uma lista.";
Blockly.Msg.LISTS_TOOLTIP = "Retorna verdadeiro se a lista estiver vazia.";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "falso";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://code.google.com/p/blockly/wiki/True_False";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Retorna verdadeiro (True) ou falso (False).";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "Verdadeiro";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://pt.wikipedia.org/wiki/Desigualdade_matemática";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Se ambos os valores forem iguais, retorna verdadeiro.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Se o primeiro valor for maior que o segundo, retorna verdadeiro.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Se o primeiro valor for maior ou igual ao segundo, retorna verdadeiro.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Se o primeiro valor for menor que o segundo, retorna verdadeiro.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Se o primeiro valor for menor ou igual ao segundo, retorna verdadeiro.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Se o primeiro valor for diferente do segundo, retorna verdadeiro.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://pt.wikipedia.org/wiki/Negação_lógica";
Blockly.Msg.LOGIC_NEGATE_TITLE = "não %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Se a entrada for falsa, retorna verdadeiro. Se a entrada for verdadeira, retorna falsa.";
Blockly.Msg.LOGIC_NULL = "nulo";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://pt.wikipedia.org/wiki/Valor_nulo";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Retorna um valor nulo.";
Blockly.Msg.LOGIC_OPERATION_AND = "e";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://pt.wikipedia.org/wiki/Operação_lógica";
Blockly.Msg.LOGIC_OPERATION_OR = "ou";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Retorna verdadeiro se ambos os valores forem verdadeiros.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Retorna verdadeiro se pelo menos um dos valores for verdadeiro.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "teste";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://pt.wikipedia.org/wiki/Operador_ternário";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "se falso";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "se verdadeiro";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Verifica a condição em 'teste'. Se a condição for verdadeira, retorna o valor em 'se verdadeiro'; caso contrário, retorna o valor em 'se falso'.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://pt.wikipedia.org/wiki/Aritmética";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Retorna a soma dos dois números.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Retorna o quociente da divisão dos dois números.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Retorna a diferença dos dois números.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Retorna o produto dos dois números.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Retorna o valor do primeiro número elevado ao segundo número, que é o expoente.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_INPUT_BY = "por";
Blockly.Msg.MATH_CHANGE_TITLE_CHANGE = "mudar";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Adicionar um número à variável '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Retorna uma das constantes comuns: π (3,141…), e (2,718…), φ (1,618…), sqrt(2) (1,414…), sqrt(½) (0,707…), ou ∞ (infinito).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "limitar %1 mínimo %2 máximo %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Limitar um número para ficar entre os limites especificados (inclusos).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "é divisível por";
Blockly.Msg.MATH_IS_EVEN = "é par";
Blockly.Msg.MATH_IS_NEGATIVE = "é negativo";
Blockly.Msg.MATH_IS_ODD = "é ímpar";
Blockly.Msg.MATH_IS_POSITIVE = "é positivo";
Blockly.Msg.MATH_IS_PRIME = "é primo";
Blockly.Msg.MATH_IS_TOOLTIP = "Verifica se um número é par, ímpar, primo, inteiro, positivo, negativo ou se é divisível por um determinado número. Retorna verdadeiro ou falso.";
Blockly.Msg.MATH_IS_WHOLE = "é inteiro";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "resto da divisão de %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Retorna o resto da divisão de dois números.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Um número.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "média da lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "maior valor da lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "mediana da lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "mínimo da lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modas da lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "elemento aleatório da lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "desvio padrão da lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "soma da lista";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Retorna a média (média aritmética) dos valores numéricos da lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Retorna o maior número da lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Retorna o número mediano da lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Retorna o menor número da lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Retorna uma lista dos itens mais comuns na lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Retorna um elemento aleatório da lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Retorna o desvio padrão da lista.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Retorna a soma de todos os números na lista.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://pt.wikipedia.org/wiki/Gerador_de_números_aleatórios";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "fração aleatória";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Retorna um número aleatório entre 0.0 (inclusive) e 1.0 (exclusivo).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://pt.wikipedia.org/wiki/Gerador_de_números_aleatórios";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "inteiro aleatório de %1 até %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Retorna um número inteiro aleatório entre os dois limites especificados, inclusive.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://pt.wikipedia.org/wiki/Arredondamento";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "arredondar";
Blockly.Msg.MATH_ROUND_OPERATOR_CEIL = "arredondar para cima";
Blockly.Msg.MATH_ROUND_OPERATOR_FLOOR = "arredondar para baixo";
Blockly.Msg.MATH_ROUND_OPERATOR_TRUNC = "truncar";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Arredonda um número para cima ou para baixo.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://pt.wikipedia.org/wiki/Raiz_quadrada";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absoluto";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "raiz quadrada";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Retorna o valor absoluto de um número.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Retorna o exponencial de um número.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG = "Retorna o logaritmo natural de um número.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Retorna o logaritmo de base 10 de um número.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG2 = "Retorna o logaritmo de base 2 de um número.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Retorna o negativo de um número.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW = "Retorna um número elevado a uma potência específica.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Retorna a raiz quadrada de um número.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://pt.wikipedia.org/wiki/Fun%C3%A7%C3%B5es_trigonom%C3%A9tricas";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_LOG = "log";
Blockly.Msg.MATH_TRIG_LOG10 = "log10";
Blockly.Msg.MATH_TRIG_LOG2 = "log2";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Retorna o arco-cosseno de um ângulo (em graus).";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Retorna o arco-seno de um ângulo (em graus).";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Retorna o arco-tangente de um ângulo (em graus).";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Retorna o cosseno de um ângulo (em graus).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Retorna o seno de um ângulo (em graus).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Retorna a tangente de um ângulo (em graus).";
Blockly.Msg.ME = "Eu";
Blockly.Msg.NEW_VARIABLE = "Nova variável...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Nome da nova variável:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "permitir declarações";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "com:";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "chamar";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Executa a função personalizada '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Executa a função personalizada '%1' e retorna um valor.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "parâmetros:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Criar '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "minhaFuncao";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "nome da função";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Cria uma função que não retorna um valor.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "retorna";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Cria uma função que retorna um valor.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Aviso: Esta função tem parâmetros duplicados.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Destaque a definição da função";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Se um valor é verdadeiro, então retorna o segundo valor.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Aviso: Este bloco só pode ser usado dentro da definição da função.";
Blockly.Msg.PROCEDURES_MUTATORARG_PRETITLE='variável';
Blockly.Msg.PROCEDURES_MUTATORARG_ARRAY_PRETITLE='array';
Blockly.Msg.PROCEDURES_MUTATORARG_POINTER_PRETITLE='ponteiro';
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "nome da variável:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Adiciona um parâmetro para a função.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "parâmetros";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Adiciona, remove ou reorganiza os parâmetros da função.";
Blockly.Msg.REMOVE_COMMENT = "Remover comentário";
Blockly.Msg.RENAME_VARIABLE = "Renomear variável...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Renomear todas as variáveis '%1' para:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "acrescentar texto";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Msg.TEXT_APPEND_TO = "para";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Anexa algum texto à variável '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Adjusting_text_case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "para minúsculas";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "para Capitalize Case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "para MAIÚSCULAS";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Retorna uma cópia do texto em outro caso.";
Blockly.Msg.TEXT_CHARAT_FIRST = "obter primeira letra";
Blockly.Msg.TEXT_CHARAT_FROM_END = "obter letra # a partir do final";
Blockly.Msg.TEXT_CHARAT_FROM_START = "obter letra #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "no texto";
Blockly.Msg.TEXT_CHARAT_LAST = "obter última letra";
Blockly.Msg.TEXT_CHARAT_RANDOM = "obter letra aleatória";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Retorna a letra na posição especificada.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Adicionar um item ao texto.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "juntar";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Adicionar, remover ou reorganizar seções para reconfigurar esse bloco de texto.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "para letra # a partir do final";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "para letra #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "para a última letra";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Extracting_a_region_of_text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "no texto";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "obter substring da primeira letra";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "obter substring da letra # a partir do final";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "obter substring da letra #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Retorna uma porção especificada do texto.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Finding_text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "no texto";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "encontrar primeira ocorrência de texto";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "encontrar última ocorrência de texto";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Retorna o índice da primeira/última ocorrência do primeiro texto no segundo texto. Retorna 0 se o texto não for encontrado.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Checking_for_empty_text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 está vazio";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Retorna verdadeiro se o texto fornecido estiver vazio.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "criar texto com";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Cria um trecho de texto juntando qualquer número de itens.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Text_modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "comprimento de %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Retorna o número de letras (incluindo espaços) no texto fornecido.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Printing_text";
Blockly.Msg.TEXT_PRINT_TITLE = "imprimir %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Formata e imprime a string, número ou outro valor.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Getting_input_from_the_user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Solicitar ao usuário um número.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Solicitar ao usuário um texto.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "solicitar número com a mensagem";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "solicitar texto com a mensagem";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Um caractere, letra ou linha de conteúdo de texto.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://code.google.com/p/blockly/wiki/Text#Trimming_%28removing%29_spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "remover espaços de ambos os lados de";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "remover espaços do lado esquerdo de";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "remover espaços do lado direito de";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Retorna uma cópia do texto com espaços removidos de um ou ambos os lados.";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Criar 'definir %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://code.google.com/p/blockly/wiki/Variables#Get";
Blockly.Msg.VARIABLES_GET_TAIL = "";
Blockly.Msg.VARIABLES_GET_TITLE = "";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Retorna o valor desta variável.";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Criar 'obter %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://code.google.com/p/blockly/wiki/Variables#Set";
Blockly.Msg.VARIABLES_SET_TAIL = "o valor";
Blockly.Msg.VARIABLES_SET_TITLE = "atribuir";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Especifica que esta variável se torna o valor a seguir.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.VARIABLES_SET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.VARIABLES_GET_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.STDIO_PRINTF_TITLE = 'Imprimir';
Blockly.Msg.STDIP_PRINTF_MUTATOR_PRINTFADD_TITLE = 'item';
Blockly.Msg.STDIO_SCANF_TITLE = 'Ler';
Blockly.Msg.STDIP_SCANF_MUTATOR_SCANFADD_TITLE = 'item';
Blockly.Msg.STDIO_SCANF_TOOLTIP = '';
Blockly.Msg.STDIO_SCANF_HELPURL = 'https://en.wikipedia.org/wiki/Scanf_format_string';
Blockly.Msg.STDIO_NEWLINE_TITLE = 'Nova linha\n';
Blockly.Msg.STDIO_NEWLINE_TOOLTIP = 'Caractere de nova linha';
Blockly.Msg.STDIO_NEWLINE_HELPURL = 'https://en.wikipedia.org/wiki/Newline';
Blockly.Msg.COMMENT_TITLE = 'Comentário';
Blockly.Msg.COMMENT_MUTATOR_COMMENTADD_TITLE = 'item';
Blockly.Msg.COMMENT_TOOLTIP = '"Comentário" é uma sequência de caracteres iniciada com uma barra e um asterisco (/), que é considerada como um único espaço em branco pelo compilador e é ignorada. Comentários podem ser compostos por vários caracteres, incluindo caracteres de nova linha, mas não devem conter o final do comentário (/). Os comentários podem se estender por várias linhas, mas não podem ser aninhados ou aparecer em qualquer lugar';
Blockly.Msg.STDLIB_CONVERT_TITLE = 'Converter a string %1 em %2';
Blockly.Msg.STDLIB_CONVERT_INT = 'int';
Blockly.Msg.STDLIB_CONVERT_DOUBLE = 'double';
Blockly.Msg.STDLIB_CONVERT_TOOLTIP = 'Converte a string em um número inteiro ou de ponto flutuante.';
Blockly.Msg.STDLIB_CONVERT_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Msg.STDLIB_RAND_TITLE = 'Valor aleatório %1';
Blockly.Msg.STDLIB_RAND_TOOLTIP = 'Gera um valor aleatório';
Blockly.Msg.STDLIB_RAND_HELPURL = 'https://en.wikipedia.org/wiki/C_mathematical_functions#Random_number_generation';
Blockly.Msg.STDLIB_RANDSCOPE_TITLE = "Intervalo de valor aleatório: %1 ~ %2";
Blockly.Msg.STDLIB_RANDSCOPE_TOOLTIP = 'Define o intervalo de valor aleatório.';
Blockly.Msg.STDLIB_RANDSCOPE_HELPURL = 'https://en.wikipedia.org/wiki/C_mathematical_functions#Random_number_generation';
Blockly.Msg.STDLIB_SRAND_TITLE = 'Semente do valor aleatório %1'; // não utilizado
Blockly.Msg.STDLIB_MALLOC_TITLE = 'Alocar memória dinamicamente malloc %1';
Blockly.Msg.STDLIB_MALLOC_TOOLTIP = 'Aloca memória dinamicamente';
Blockly.Msg.STDLIB_MALLOC_HELPURL = 'https://en.wikipedia.org/wiki/C_dynamic_memory_allocation';
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_TITLE = 'Número de bytes %1';
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_TOOLTIP = 'Retorna o número de bytes';
Blockly.Msg.STDLIB_SIZEOFFORMALLOC_HELPURL = 'https://en.wikipedia.org/wiki/Sizeof';
Blockly.Msg.STDLIB_ARITHFORMALLOC_TITLE = '%1 x %2';
Blockly.Msg.STDLIB_FREE_TITLE = 'libertar memória de %1';
Blockly.Msg.STDLIB_FREE_TOOLTIP = 'Libertar memória alocada dinamicamente.';
Blockly.Msg.STDLIB_FREE_HELPURL = 'https://en.wikipedia.org/wiki/C_dynamic_memory_allocation';
Blockly.Msg.STDLIB_EXIT_TITLE = 'terminar com %1';
Blockly.Msg.STDLIB_EXIT_SUCCESS = 'sucesso';
Blockly.Msg.STDLIB_EXIT_FAILURE = 'falha';
Blockly.Msg.STDLIB_EXIT_TOOLTIP = 'Terminar o programa.';
Blockly.Msg.STDLIB_EXIT_HELPURL = 'https://en.wikipedia.org/wiki/Exit_(system_call)';
Blockly.Msg.MATH_SIN_TITLE = 'sin %1'; // not use
Blockly.Msg.MATH_COS_TITLE = 'cos %1'; // not use
Blockly.Msg.MATH_TAN_TITLE = 'tan %1'; // not use
Blockly.Msg.MATH_POW_TITLE = 'elevar %1 por %2';
Blockly.Msg.MATH_EXP_TITLE = 'elevar e por %1 ';
Blockly.Msg.MATH_SQRT_TITLE = 'raiz quadrada de %1';
Blockly.Msg.MATH_ABS_TITLE = 'Valor absoluto %1'; // not use
Blockly.Msg.MATH_NUMCHECK_TITLE = '%1 é %2?';
Blockly.Msg.MATH_NUMCHECK_ISFINITE = 'um valor finito';
Blockly.Msg.MATH_NUMCHECK_ISINF = 'um valor infinito';
Blockly.Msg.MATH_NUMCHECK_SIGNBIT = 'um valor negativo';
Blockly.Msg.MATH_NUMCHECK_ISNAN = 'um valor NaN';
Blockly.Msg.MATH_NUMCHECK_TOOLTIP = '';
Blockly.Msg.MATH_NUMCOMPARE_TITLE = '%1 valor 1 é %2 valor 2';
Blockly.Msg.MATH_NUMCOMPARE_ISGREATER = 'maior que';
Blockly.Msg.MATH_NUMCOMPARE_ISLESS = 'menor que';
Blockly.Msg.MATH_NUMCOMPARE_ISGREQ = 'maior ou igual a';
Blockly.Msg.MATH_NUMCOMPARE_ISLEEQ = 'menor ou igual a';
Blockly.Msg.MATH_NUMCOMPARE_ISLEGR = 'diferente de';
Blockly.Msg.MATH_NUMCOMPARE_ISUNORDER = 'sem ordem';
Blockly.Msg.MATH_NUMCOMPARE_TOOLTIP = '';
Blockly.Msg.STRING_STRLEN_TITLE = 'Comprimento da string %1';
Blockly.Msg.STRING_STRLEN_TOOLTIP = 'Retorna o comprimento da string.';
Blockly.Msg.STRING_STRLEN_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Msg.STRING_STRCAT_TITLE = 'Concatenar strings %1 e %2';
Blockly.Msg.STRING_STRCAT_TOOLTIP = 'Concatena duas strings.';
Blockly.Msg.STRING_STRCAT_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Msg.STRING_STRCPY_TITLE = 'Copiar string de %1 para %2';
Blockly.Msg.STRING_STRCPY_TOOLTIP = 'Copia a primeira string para a segunda.';
Blockly.Msg.STRING_STRCPY_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';
Blockly.Msg.STRING_STRCMP_TITLE = 'Comparar strings %1 e %2';
Blockly.Msg.STRING_STRCMP_TOOLTIP = 'Compara duas strings.';
Blockly.Msg.STRING_STRCMP_HELPURL = 'https://en.wikipedia.org/wiki/C_string_handling';

Blockly.Msg.TIME_REQUIREDTIME_TITLE = 'Calcular tempo decorrido';
Blockly.Msg.TIME_REQRUIEDTIME_TALE = 'Salvar em variável double %1';
Blockly.Msg.TIME_TIME_CURRENT_TITLE = 'Mostrar hora atual';

Blockly.Msg.VARIABLES_SET_DIST_VARIABLE = 'Variável';
Blockly.Msg.VARIABLES_SET_DIST_POINTER = 'Ponteiro';
Blockly.Msg.VARIABLES_SET_DIST_ARRAY = 'Array';
Blockly.Msg.VARIABLES_SET_POINTER_SPEC_ONE = '*';
Blockly.Msg.VARIABLES_SET_POINTER_SPEC_TWO = '**';
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_ONE = '[]';
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_TWO = '[][]';
Blockly.Msg.VARIABLES_SET_ARRAY_SPEC_THREE = '[][][]';
Blockly.Msg.VARIABLES_SET_TYPE_INT = 'int';
Blockly.Msg.VARIABLES_SET_TYPE_UNSIGNED_INT= 'unsigned int';
Blockly.Msg.VARIABLES_SET_TYPE_FLOAT = 'float';
Blockly.Msg.VARIABLES_SET_TYPE_DOUBLE = 'double';
Blockly.Msg.VARIABLES_SET_TYPE_CHAR= 'char';
Blockly.Msg.VARIABLES_SET_ITERATION_NORMAL = '*';
Blockly.Msg.VARIABLES_SET_ITERATION_DOUBLE = '**';
Blockly.Msg.VARIABLES_SET_ITERATION_TRIPLE = '***';
Blockly.Msg.VARIABLES_DECLARE_TITLE = 'Declarar variável';
Blockly.Msg.VARIABLES_DECLARE_NAME = ' com nome';
Blockly.Msg.VARIABLES_DECLARE_INIT = 'e valor inicial';
Blockly.Msg.VARIABLES_DECLARE_DEFAULT_NAME = 'minhaVar';
Blockly.Msg.VARIABLES_POINTER_DECLARE_TITLE = 'Declarar ponteiro';
Blockly.Msg.VARIABLES_POINTER_DECLARE_ITERATION = '';
Blockly.Msg.VARIABLES_POINTER_DECLARE_DEFAULT_NAME = 'meuPtr';
Blockly.Msg.VARIABLES_ARRAY_DECLARE_TITLE = 'Declarar array';
Blockly.Msg.VARIABLES_ARRAY_DECLARE_LENGTH = 'Número de elementos';
Blockly.Msg.VARIABLES_ARRAY_DECLARE_DEFAULT_NAME = 'meuArr';
Blockly.Msg.VARIABLES_RETURN = 'Retornar ';
Blockly.Msg.POINTER_GET_TITLE = "obter valor do ponteiro %1";
Blockly.Msg.ARRAY_GET_TITLE = "obter valor do elemento %1 do array %2";

Blockly.Msg.FUNCTION_SET_TYPE_INT = 'int';
Blockly.Msg.FUNCTION_SET_TYPE_FLOAT = 'float';
Blockly.Msg.FUNCTION_SET_TYPE_DOUBLE = 'double';
Blockly.Msg.FUNCTION_SET_TYPE_LONG = 'long';
Blockly.Msg.FUNCTION_SET_TYPE_LONGLONG = 'long long';
Blockly.Msg.FUNCTION_SET_TYPE_SHORT = 'short';
Blockly.Msg.FUNCTION_SET_TYPE_LONGDOUBLE = 'long double';
Blockly.Msg.FUNCTION_SET_TYPE_CHAR = 'char';

Blockly.Msg.DEFINE_DECLARE_TITLE = '#define';
Blockly.Msg.DEFINE_DECLARE_INIT = 'é';
Blockly.Msg.DEFINE_DECLARE_DEFAULT_NAME = 'myMacro';
Blockly.Msg.DEFINE_GET_TITLE = '';
Blockly.Msg.DEFINE_SET_TYPE_CONSTANT = 'constante';
Blockly.Msg.DEFINE_SET_TYPE_MACRO = 'macro';

Blockly.Msg.MAIN_BLOCK = 'Função main(): programa principal';
Blockly.Msg.MAIN_BLOCK_RETURN = "Retorno de tipo int:";

Blockly.Msg.CONTROLS_SWITCH = 'Switch';
Blockly.Msg.CONTROLS_SWITCH_CASE = 'Testar caso:';

Blockly.Msg.STRUCTURE_DEFINE_TITLE = 'Nome da estrutura';
Blockly.Msg.STRUCTURE_DEFINE_NAME = 'myStructure';
Blockly.Msg.STRUCTURE_MUTATORCONTAINER_TITLE = 'Membros';
Blockly.Msg.STRUCTURE_MUTATORMEM_VAR= 'Tipo de variável';
Blockly.Msg.STRUCTURE_MUTATORMEM_POINTER= 'Tipo de ponteiro';
Blockly.Msg.STRUCTURE_MUTATORMEM_ARRAY= 'Tipo de array';
Blockly.Msg.STRUCTURE_MUTATORARG_NAME = 'Nome';

Blockly.Msg.STRUCTURE_DECLARE_TITLE = 'Tipo';
Blockly.Msg.STRUCTURE_DECLARE_TALE = 'Nome';
Blockly.Msg.STRUCTURE_DECLARE_NAME = 'myStructure1';

Blockly.Msg.STRUCTURE_SET_NAME = 'Nome';
Blockly.Msg.STRUCTURE_SET_MEMBER = 'Membro';

Blockly.Msg.STRUCTURE_GET_NAME = 'Nome';
Blockly.Msg.STRUCTURE_GET_MEMBER = 'Membro';

Blockly.Msg.UNION_DEFINE_NAME = 'myUnion';

Blockly.Msg.PROCEDURES_RETURN_TITLE = 'Retornar';
Blockly.Msg.PROCEDURES_RETURN_TOOLTIP = 'Retorna um valor e termina a execução da função. Se nenhum valor for especificado, a função apenas é terminada. Pode ser usado em qualquer lugar dentro de um bloco de função.';
Blockly.Msg.PLZ_OUT_OF_BLOCK = 'Aviso: Este bloco não pode ser colocado fora de outros blocos de código, exceto em blocos de função.';
Blockly.Msg.PLZ_INSIDE_FUNCTION = 'Aviso: Este bloco deve ser colocado dentro de um bloco de função.';
Blockly.Msg.PLZ_OUT_OF_FUNCTION = 'Aviso: Este bloco não pode ser colocado fora de um bloco de função.';

Blockly.Msg.SELECT_MENU = '-Variável-';
Blockly.Msg.SELECT_TYPE = '-Tipo-';

Blockly.Msg.TAG_DEFINE_DECLARE = ['macro', 'constant'];
Blockly.Msg.TAG_DEFINE_GET = ['macro', 'constant', 'get'];
Blockly.Msg.TAG_VARIABLE_DECLARE = ['variables', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_SET = ['variables', 'assignment', 'set'];
Blockly.Msg.TAG_VARIABLE_GET = ['variables', 'get'];
Blockly.Msg.TAG_VARIABLE_POINTER_DECLARE = ['pointer', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_POINTER_SET = ['pointer', 'assignment', 'set'];
Blockly.Msg.TAG_VARIABLE_POINTER_GET = ['pointer', 'get'];
Blockly.Msg.TAG_VARIABLE_POINTER_ADDR = ['&', 'address'];
Blockly.Msg.TAG_VARIABLE_POINTER_ASTR = ['*', 'asterisk'];
Blockly.Msg.TAG_VARIABLE_ARRAY_DECLARE = ['array', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_VARIABLE_ARRAY_SET = ['array', 'assignment', 'set'];
Blockly.Msg.TAG_VARIABLE_ARRAY_GET = ['array', 'get'];

Blockly.Msg.TAG_STRUCTURE_DEFINE = ['structure', 'typedef', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_STRUCTURE_DECLARE = ['structure', 'declare', 'define', 'declaration', 'definition'];
Blockly.Msg.TAG_STRUCTURE_GET = ['structure', 'get'];
Blockly.Msg.TAG_STRUCTURE_SET = ['structure', 'assignment', 'set'];

Blockly.Msg.TAG_LOGIC_IF = ['if', 'if else', 'ifelse'];
Blockly.Msg.TAG_LOGIC_COMPARE = ['compare'];
Blockly.Msg.TAG_LOGIC_OPERATION = ['operation', 'and', 'or'];
Blockly.Msg.TAG_LOGIC_NEGATE = ['!', 'negate'];
Blockly.Msg.TAG_LOGIC_BOOLEAN = ['boolean', 'true', 'false'];
Blockly.Msg.TAG_LOGIC_NULL = ['null', 'null character'];
Blockly.Msg.TAG_LOGIC_TERNARY = ['?'];
Blockly.Msg.TAG_LOGIC_SWITCH = ['switch', 'case'];

Blockly.Msg.TAG_LOOP_WHILE = ['while', 'loop'];
Blockly.Msg.TAG_LOOP_FOR = ['for', 'loop'];
Blockly.Msg.TAG_LOOP_FLOW = ['break', 'continue'];

Blockly.Msg.TAG_PROCEDURE_DEFNORETURN = ['void', 'function'];
Blockly.Msg.TAG_PROCEDURE_DEFRETURN = ['function'];

Blockly.Msg.TAG_MATH_NUMBER = ['number'];
Blockly.Msg.TAG_MATH_ARITHMETIC = ['number', 'arithmetic', 'additionsubtractionmultiplicationdivision', '+-*/'];
Blockly.Msg.TAG_MATH_MODULO = ['arithmetic', 'remainder', '%'];

Blockly.Msg.TAG_STDIO_PRINTF = ['stdio.h', 'printf()', 'output', 'out'];
Blockly.Msg.TAG_STDIO_TEXT = ['stdio.h', 'text'];
Blockly.Msg.TAG_STDIO_NEWLINE = ['stdio.h', 'newline', 'new line', '\n', 'change line', 'line change'];
Blockly.Msg.TAG_STDIO_SCANF = ['stdio.h', 'scanf()', 'input'];

Blockly.Msg.TAG_COMMENT = ['comment', 'Comment', '\/\/', '\/**\/'];

Blockly.Msg.TAG_STDLIB_CONVERT = ['stdlib.h', 'convert', 'atoi()', 'atof()'];
Blockly.Msg.TAG_STDLIB_RAND = ['stdlib.h', 'random number'];
Blockly.Msg.TAG_STDLIB_MALLOC = ['stdlib.h', 'malloc()', 'memory allocation', 'memory allocate'];
Blockly.Msg.TAG_STDLIB_SIZEOF = ['stdlib.h', 'sizeof()', 'size of', 'sizeOf'];
Blockly.Msg.TAG_STDLIB_FREE = ['stdlib.h', 'free()'];
Blockly.Msg.TAG_STDLIB_EXIT = ['stdlib.h', 'exit(0)', 'exit(1)', 'end', 'the end'];

Blockly.Msg.TAG_STRING_STRLEN = ['string.h', 'strlen()', 'string length', 'length of string'];
Blockly.Msg.TAG_STRING_STRCAT = ['string.h', 'strcat()', 'string concatenate', 'concatenate string'];
Blockly.Msg.TAG_STRING_STRCPY = ['string.h', 'strcpy()', 'string copy', 'copy string'];
Blockly.Msg.TAG_STRING_STRCMP = ['string.h', 'strcmp()', 'string compare', 'compare string'];

Blockly.Msg.TAG_MATH_ABS = ['math.h', 'absolute value'];
Blockly.Msg.TAG_MATH_TRIG = ['math.h', 'trigonometric function', 'sin()', 'cos()', 'tan()', 'sine function', 'cosine function', 'tangent function'];
Blockly.Msg.TAG_MATH_LOGS = ['math.h', 'log()', 'loge()', 'log10()', 'log2()', 'log e'];
Blockly.Msg.TAG_MATH_POW = ['math.h', 'power', 'pow()'];
Blockly.Msg.TAG_MATH_EXP = ['math.h', 'exponential function', 'exp()'];
Blockly.Msg.TAG_MATH_SQRT = ['math.h', 'sqrt()', 'square root'];
Blockly.Msg.TAG_MATH_ROUND = ['math.h', 'round up', 'round down', 'round()', 'trunc()', 'ceil()', 'floor()', 'truncate'];
Blockly.Msg.TAG_MATH_NUMCHECK = ['math.h', 'two number check'];
Blockly.Msg.TAG_MATH_NUMCOMPARE = ['math.h', 'two number compare'];

Blockly.Msg.TAG_TIME_CURRENT = ['time.h', 'get current time', 'print current time'];
Blockly.Msg.TAG_TIME_REQUIREDTIME = ['time.h', 'the time to do followings'];

Blockly.Msg.PROCEDURES_ILLEGALNAME = 'Nome de função inválido';
Blockly.Msg.VARIABLES_ILLEGALNAME = 'Nome de variável inválido';
Blockly.Msg.STRUCTURE_ILLEGALNAME = 'Nome de estrutura inválido';

Blockly.Msg.CONTROLS_SWITCH_BREAK_WARNING = "Aviso: este bloco deve ser usado dentro do bloco 'switch'";
Blockly.Msg.CONTROLS_SWITCH_BREAK = 'Sair do switch';
Blockly.Msg.CONTROLS_SWITCH_BREAK_TOOLTIP = 'Sai do bloco "switch" atual.';
Blockly.Msg.CONTROLS_SWITCH_DEFAULT = 'default:';
Blockly.Msg.CONTROLS_SWITCH_DO = "executar";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP1 = "Se não houver correspondência, executa o primeiro bloco de código. Se houver correspondência com o segundo valor, executa o segundo bloco de código.";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP2 = "Se não houver correspondência, executa o primeiro bloco de código. Se houver correspondência com o segundo valor, executa o segundo bloco de código. Se houver correspondência com o terceiro valor, executa o terceiro bloco de código.";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP3 = "Se não houver correspondência, executa o primeiro bloco de código. Se houver correspondência com o segundo valor, executa o segundo bloco de código, ... Se houver correspondência com o último valor, executa o último bloco de código.";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP4 = "Se não houver correspondência, executa o primeiro bloco de código. Se houver correspondência com o segundo valor, executa o segundo bloco de código, ... Se houver correspondência com o último valor, executa o último bloco de código.";
Blockly.Msg.CONTROLS_SWITCH_CASE_TOOLTIP = "Adiciona uma condição para o bloco 'switch'.";

Blockly.Msg.MAINPROCEDURES_TOOLTIP = "Bloco básico para o programa principal 'main()', retorna um valor inteiro (int).";

Blockly.Msg.STRUCTURE_DEFINE_TOOPTIP = "Define uma estrutura, onde é possível adicionar, remover ou renomear seus membros. A definição da estrutura deve ser feita antes de utilizá-la.";
Blockly.Msg.STRUCTURE_DECLARE_TOOPTIP = "Declara uma variável com base em uma estrutura definida. A definição da estrutura deve ser feita antes de utilizá-la.";
Blockly.Msg.STRUCTURE_GET_TOOLTIP = "Retorna o valor da estrutura ou de um de seus membros.";
Blockly.Msg.STRUCTURE_SET_TOOLTIP = "Define o valor da estrutura ou de um de seus membros.";
Blockly.Msg.STRUCTURE_MUTATORCONTAINER_TOOLTIP = "Adiciona, remove ou rearranja membros.";
Blockly.Msg.STRUCTURE_MUTATORARG_TOOLTIP = "Adiciona um membro à estrutura.";

Blockly.Msg.TIME_CURRENT_TOOLTIP = "Mostra a data atual no formato \"aaaa-mm-dd hh:mm:ss\"";
Blockly.Msg.TIME_REQUIREDTIME_TOOLTIP = "Salva o tempo decorrido em uma variável do tipo float (double).";

Blockly.Msg.VARIABLES_DECLARE_TOOLTIP = "Declara uma variável.";

Blockly.Msg.TAG_MATH_CONVERT_TYPE = ['(tipo)'];
Blockly.Msg.MATH_CONVERT_TYPE_TOOLTIP = "Converte um valor para o tipo especificado.";

Blockly.Msg.TAG_STDIO_TAB = ['stdio.h', 'tab', '\t'];
Blockly.Msg.STDIO_TAB_TITLE="Tab";
Blockly.Msg.STDIO_TAB_TOOLTIP="Tecla TAB";
Blockly.Msg.VARIABLES_ARRAY_POINTER_TOOLTIP="Ponteiro para o nome do array";

Blockly.Msg.MATH_INCREMENT_OP="++";
Blockly.Msg.MATH_DECREMENT_OP="--";
Blockly.Msg.TAG_MATH_PREV_INC_DECREMENT = ['número', 'incremento/decremento anterior', '++', '--'];
Blockly.Msg.MATH_PREV_INC_DECREMENT_TOOLTIP = "Operador de incremento/decremento anterior.";
Blockly.Msg.TAG_MATH_POST_INC_DECREMENT = ['número', 'incremento/decremento posterior', '++', '--'];
Blockly.Msg.MATH_POST_INC_DECREMENT_TOOLTIP = "Operador de incremento/decremento posterior.";
Blockly.Msg.MATH_INCREMENT_EXPRESSION_TITLE = "%1 ++";
Blockly.Msg.MATH_INCREMENT_EXPRESSION_TOOLTIP = "Expressão de incremento.";
Blockly.Msg.TAG_MATH_INCREMENT_EXPRESSION = ['número', 'expressão de incremento', '++'];
Blockly.Msg.MATH_DECREMENT_EXPRESSION_TITLE = "%1 --";
Blockly.Msg.MATH_DECREMENT_EXPRESSION_TOOLTIP = "Expressão de decremento.";
Blockly.Msg.TAG_MATH_DECREMENT_EXPRESSION = ['número', 'expressão de decremento', '--'];

Blockly.Msg.TAG_MATH_AUTO_CONVERT_TYPE = ['conversões de tipo automático'];
Blockly.Msg.MATH_AUTO_CONVERT_TYPE_TOOLTIP = "Especifica as conversões de tipo lógico e aritmético.";

Blockly.Msg.TAG_VARIABLES_STRING_NULL = ['nulo', 'terminado em nulo'];
Blockly.Msg.VARIABLES_STRING_NULL = "'\0'";
Blockly.Msg.VARIABLES_STRING_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.VARIABLES_STRING_NULL_TOOLTIP = "Retorna o caractere final de uma string.";
Blockly.Msg.VARIABLES_STRING_DECLARE_DEFAULT_NAME = "minhaString";
Blockly.Msg.VARIABLES_STRING_DECLARE_TITLE = "String";
Blockly.Msg.VARIABLES_STRING_DECLARE_LENGTH = 'número de caracteres';
Blockly.Msg.VARIABLES_STRING_DECLARE_VALUE = "valor inicial";

Blockly.Msg.VARIABLES_ARRAY_DECLARE_VALUE = "valor inicial";
Blockly.Msg.VARIABLES_ARRAY_INITIAL = "Inicializar a partir da lista";
Blockly.Msg.VARIABLES_ARRAY_INITIAL_WARNING = "O tamanho do array unidimensional declarado é [menor que] o número de elementos na lista!";
Blockly.Msg.VARIABLES_ARRAY_INITIAL_TOOLTIP = "Use uma lista de chaves para inicializar o array.";
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TITLE_ADD = "array";
Blockly.Msg.ARRAY_CREATE_WITH_CONTAINER_TOOLTIP = "Adicionar, remover ou reorganizar elementos do array.";
Blockly.Msg.ARRAY_CREATE_WITH_ITEM_TITLE = "valor do elemento";
Blockly.Msg.ARRAY_CREATE_WITH_ITEM_TOOLTIP = "Adiciona um elemento ao array.";

Blockly.Msg.TEXT_CHAR = 'http://arduino.cc/en/Reference/char';
Blockly.Msg.TEXT_CHAR_TOOLTIP = 'Valor constante de um caractere, deve ser apenas um caractere.';
Blockly.Msg.TEXT_CHAR_WARNING = "Apenas um caractere ou um caractere de escape podem ser especificados!";
